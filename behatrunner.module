<?php
/**
 * @file
 * behatrunner module implementation
 */

/**
 * Registers a test location.
 *
 * @param string $name
 *   The name for this location.
 *
 * @param string $module
 *   The name of the module registering this location.
 *
 * @param string $location
 *   The location of the tests, relative to the Drupal base.
 */
function behatrunner_register_location($name, $module, $location) {
  // Check for module entry already.
  $record = behatrunner_get_module_registration($module);

  // If entry exists, remove it.
  if ($record) {
    behatrunner_deregister_location($record->btid);
  }

  // Add entry.
  $data['name'] = $name;
  $data['module'] = $module;
  $data['location'] = $location;
  $location_entry = entity_create('behatrunner_test_location', $data);
  $location_entry->save();
}


/**
 * Wrapper function for modules to register a test location.
 *
 * @param string $module
 *   The name of the module registering this location.
 *
 * @param string $test_location
 *   The location of the tests, relative to the module.
 */
function behatrunner_register_module($module, $test_location) {
  $location = drupal_get_path('module', $module) . '/' . $test_location;
  behatrunner_register_location($module, $module, $location);
}


/**
 * Looks up a registration for the given module.
 *
 * @param string $module
 *   The module name.
 *
 * @return object
 *   The record object.
 */
function behatrunner_get_module_registration($module) {
  $query = 'SELECT btid FROM {behatrunner_test_location}';
  $query .= ' WHERE name=:name AND module=:module';
  $result = db_query($query, array(':name' => $name, ':module' => $module));
  $record = $result->fetchObject();

  return $record;
}


/**
 * De-registers a test location.
 *
 * @param int $btid
 *   The id for this location.
 */
function behatrunner_deregister_location($btid) {
  entity_delete('behatrunner_test_location', $btid);
}


/**
 * De-registers a module's test location.
 *
 * @param string $module
 *   The name for this location.
 */
function behatrunner_deregister_module($module) {
  $record = behatrunner_get_module_registration($module);
  if ($record) {
    behatrunner_deregister_location($record->btid);
  }
}


/**
 * Retrieves all known test locations.
 *
 * @return array
 *   An array of location objects.
 */
function behatrunner_get_test_locations() {
  $query = 'SELECT * FROM {behatrunner_test_location}';
  $result = db_query($query);
  $locations = $result->fetchAll();

  return $locations;
}


/**
 * Walk the known locations and discover tests to run.
 */
function behatrunner_discover_tests() {
  // Get all known test locations.
  $locations = behatrunner_get_test_locations();

  foreach ($locations as $location) {
    // TODO: Discover tests, record tags.
  }
}


/**
 * Execute Behat tests.
 *
 * @param array $location_filters
 *   An array of locations to filter out. If empty, all tests will be run.
 *
 * @param array $tag_filters
 *   An array of tags to filter out. If empty, all tests will be run.
 */
function behatrunner_execute_tests($location_filters = array(), $tag_filters = array()) {
  composer_manager_register_autoloader();
  $registrations = behatrunner_get_test_locations();

  // TODO: Replace exec() logic with direct PHP calls.
  $results = array();

  // Construct tag filter params.
  $tags = '';
  if (count($tag_filters) > 0) {
    $tags = ' --tags "~@';
    $tags .= implode($tag_filters, '&&~@');
    $tags .= '"';
  }

  foreach ($registrations as $registration) {
    // Skip locations listed in the location filter.
    if (!in_array($registration->location, $location_filters)) {
      // Construct the command.
      $vendor = composer_manager_vendor_dir();
      $command = $vendor . '/bin/behat';
      $command .= $tags;
      $command .= ' --config ' . $registration->location . '/custom-config.yml';
      drush_print($command);
      exec($command, $results);
    }
  }

  return $results;
}
